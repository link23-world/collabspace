enabled: true
id: "standard"

content:
  category:
    - title: "Openness"
      image: "std-open.png"
      what: "Openness measures if a tool is genuinely Open in all sense of the word. This encompasses everything from evaluating if underlying code is available to the public to use for free, all the way to assessing the infrastructure required to use the tool (because something is not truly open if it's restricted to the limited people who have extensive resources!)."
      why: "Openness measures if a tool is genuinely Open in all senses of the word. The first step to equity is ensuring that everyone from all backgrounds has the opportunity to use the tool. In some cases tools may not be able to be fully open due to issues around privacy and security, in those cases a tool may score 'green' even if the criteria should indicate 'amber'."
      gs: "OSI (ideally permissive) backend and open-access frontend/API (or public domain)"
      gt: "Creative commons (or similar, e.g. GNU, public domain) licence excluding NC and ND"
      as: "Closed backend and OSI approved frontend"
      at: "Creative commons (or similar) licence including NC and ND"
      rs: "No open source elements"
      rt: "No open access elements"
    - title: "Documentation"
      image: "std-doc.png"
      what: "Documentation refers to the text associated with a tool that explains how it works. Documentation covers everything from comments on code to guides demonstrating how the tool should be used."
      why: "A tool may be robust and perform well and solve a particular task, but if it is poorly documented then no one can use it. Without documentation, a tool will only be used by a narrow audience who can understand how to use it based on their prior knowledge; documenting a tool can therefore increase diversity in its users. Documenting tools can also increase trustworthiness (another criteria below) by allowing beneficiaries to read how it was developed and how it works."
      gs: "[Diataxis](https://diataxis.fr/) or other similar robust framework for technical documentation.  Modes to provide feedback/raise issues/ask for help are clear. If applicable (i.e., the project is looking for contributors): clear code of conduct (with reporting guidelines), contribution guidelines."
      gt: "Complete instructions for how to use the tool"
      as: "Frontend documented (to some meaningful extent) but backend is not"
      at: "Instructions for how to use the tool with room for improvement"
      rs: "No (or very poor) documentation"
      rt: "No (or very poor) documentation"
    - title: "Trustworthiness"
      image: "std-trust.png"
      what: "Trustworthiness measures if the results from a tool can be trusted. We take two approaches to measuring this, firstly we assess if there is evidence that the underlying code or motivation for developing the tool is trustworthy, which means checking if there is evidence that bugs are being caught and that the tool was co-developed with key stakeholders. The second item we check is whether the outputs of the tool are interpretable and cannot be misinterpreted (within reasonable limits). This means demonstrating evidence of user-testing, lay explanations of tool outputs, and where applicable checking if results from a tool are reproducible."
      why: "Quite simply: we will not promote a tool we cannot trust. This criteria ensures that the tool is doing what it says and that it can be used for good."
      gs: "Code has been robustly tested (e.g., with CI) and clear process in place for adding/reviewing new code (e.g. Git flow)"
      gt: "User-tested and shown to produce meaningful results"
      as: "Evidence of testing/QA (if not continuous)"
      at: "Not been user-tested but has clear and interpretable results"
      rs: "No evidence of testing"
      rt: "Not been user-tested and itâ€™s results are unclear"
    - title: "Accessibility"
      image: "std-acc.png"
      what: "An accessible tool is one that meets the needs of all its intended users. This means, amongst other things, being available in multiple languages, being understandable, can be easily accessed and used (e.g., does not require extensive resources to find and use the tool)."
      why: "Similarly to documentation, an inaccessible tool will isolate users and prevent new users from discovering and making use of the tool. A tool could be exceptional a given task but if users are unable to use it because of language or computational barriers then the tool is simply wasted."
      gs: "Code has clear instructions for usage (e.g., user-friendly front-end) as well as a lay summary of its usage. Code can be run offline (or at least some version of it). Code does not require HPCs or AWS (or similar) to be run (or provided if so)."
      gt: "Has a lay summary that can be understood by target audience as well as other possible interested stakeholders. Setup for localization."
      as: "Code includes clear usage instructions but requires internet access or extensive infrastructure or significant technical expertise to be run. "
      at: "User-friendly for technical/expert audience but does not provide a lay summary or clear usage-instructions for other potential users or does not provide tutorials/how-to guides when tool is not intuitive to use."
      rs: "Instructions to run code are not clear from end-to-end."
      rt: "No description of how to use the tool for technical and non-technical users."
    - title: "Maintenance and sustainability"
      image: "std-main.png"
      what: "This criteria measures if tools are 'future-proof', which means there are plans in place to ensure it either evolves and develops over time as required, or that it is retired (or 'sunsetted') when it becomes obsolete."
      why: "'Abandonware' is a huge and growing issue for open-source tools, this occurs when developers leave a project and it becomes too broken or obsolete to use. Abandonware can be prevented by either archiving code or finding a new maintainer. It is important for users to be aware of changes to tool ownership and maintenance so they can decide how to integrate it within their own projects, this is especially a concern in lower-resource settings where it may not be possible to quickly change tool dependencies. Where appropriate, the link23 community may be able to takeover tools that have become (or are becoming) abandonware."
      gs: "Clear plans to ensure code does not become abandonware"
      gt: "Clear plans to ensure tool remains usable and relevant"
      as: "No clear long-term sustainability plans but developers open to bug-fixing and maintenance from community"
      at: "No clear long-term sustainability plans but developers open to updates and maintenance from community"
      rs: "No maintenance or sustainability plans and project at risk of being abandonware"
      rt: "No maintenance or sustainability plans and project at risk of being abandoned"
    - title: "Interoperability and scalability"
      image: "std-inter.png"
      what: "In many cases tools are not used in isolation but are just part of a solution. This criteria measures how well a tool fits within a grander pipeline to solve a real-world problem (and therefore may not be applicable in some cases)."
      why: "There are many tools available for developers to use but often these require 'hacking' together. In the context of code this might mean writing new code so the outputs from one package can feed into another. For other tools this could mean changing file formats, or even updating language. Tools that fit into a larger pipeline should meet the needs of all potential users and be sufficiently generalisable, otherwise valuable resources may be wasted."
      gs: "Easily integrated into other pipelines (where applicable) with standardised inputs/outputs (e.g., APIs). Software should also allow feature requests for scalability."
      gt: "Clear how the tool is useful in a grander genomic equity (or related) pipeline. Tool also allows feature requests for scalability."
      as: "Works well with other software but limited in its ability to add new features."
      at: "Works well in a grander pipeline but limited in its ability to add new features."
      rs: "Does not work well with other related tools (when it should/could) and poorly designed making scalability difficult (or impossible without major rewrites)"
      rt: "Does not work well with other related tools (when it should/could) and poorly designed making scalability difficult (or impossible without major rewrites)"
